// Name: Carl Michael Canlas //
// Section: CYB - 201 //
// Date: November 18, 2023 //

"use strict";

var MoveTo = function () {
    var defaults = {
        tolerance: 0,
        duration: 800,
        easing: "easeOutQuart",
        container: window,
        callback: function () {}
    };

    function easeOutQuart(t, b, c, d) {
        t /= d;
        return -c * (t * t * t * t - 1) + b;
    }

    function mergeOptions(target, source) {
        var merged = {};
        Object.keys(target).forEach(function (key) {
            merged[key] = target[key];
        });
        Object.keys(source).forEach(function (key) {
            merged[key] = source[key];
        });
        return merged;
    }

    function getScrollPosition(container) {
        return container instanceof HTMLElement ? container.scrollTop : container.pageYOffset;
    }

    function MoveTo() {
        var options = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
        var easeFunctions = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};

        this.options = mergeOptions(defaults, options);
        this.easeFunctions = mergeOptions({ easeOutQuart: easeOutQuart }, easeFunctions);
    }

    MoveTo.prototype.registerTrigger = function (trigger, callback) {
        var _this = this;
        if (trigger) {
            var targetId = trigger.getAttribute("href") || trigger.getAttribute("data-target");
            var target = targetId && "#" !== targetId ? document.getElementById(targetId.substring(1)) : document.body;
            var triggerOptions = mergeOptions(this.options, function (trigger, options) {
                var triggerData = trigger.getAttribute("data-mt-" + function (str) {
                    return str.replace(/([A-Z])/g, function (match) {
                        return "-" + match.toLowerCase();
                    });
                }(trigger));
                if (triggerData) {
                    options[trigger] = isNaN(triggerData) ? triggerData : parseInt(triggerData, 10);
                }
                return options;
            }(trigger, this.options));

            if (typeof callback === "function") {
                triggerOptions.callback = callback;
            }

            var clickHandler = function (event) {
                event.preventDefault();
                _this.move(target, triggerOptions);
            };

            trigger.addEventListener("click", clickHandler, false);

            return function () {
                trigger.removeEventListener("click", clickHandler, false);
            };
        }
    };

    MoveTo.prototype.move = function (target) {
        var _this2 = this;
        var options = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};

        if (target === 0 || target) {
            options = mergeOptions(this.options, options);
            var scrollToPosition = typeof target === "number" ? target : target.getBoundingClientRect().top;
            var containerScroll = getScrollPosition(options.container);
            var lastTimestamp = null;

            scrollToPosition -= options.tolerance;

            window.requestAnimationFrame(function t(timestamp) {
                var containerScrollTop = getScrollPosition(_this2.options.container);
                if (!lastTimestamp) {
                    lastTimestamp = timestamp - 1;
                }
                var timeDelta = timestamp - lastTimestamp;

                if (scrollToPosition && (0 < scrollToPosition && containerScrollTop < scrollToPosition || scrollToPosition < 0 && containerScrollTop > scrollToPosition)) {
                    options.callback(target);
                }

                lastTimestamp = timestamp;
                var scrollPosition = _this2.easeFunctions[options.easing](timeDelta, containerScroll, scrollToPosition, options.duration);
                options.container.scroll(0, scrollPosition);

                if (timeDelta < options.duration) {
                    window.requestAnimationFrame(t);
                } else {
                    options.container.scroll(0, scrollToPosition + containerScroll);
                    options.callback(target);
                }
            });
        }
    };

    MoveTo.prototype.addEaseFunction = function (name, func) {
        this.easeFunctions[name] = func;
    };

    return MoveTo;
};

if (typeof module !== "undefined") {
    module.exports = MoveTo;
} else {
    window.MoveTo = MoveTo;
}
